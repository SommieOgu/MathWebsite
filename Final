<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Math.co</title>
    <script src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>
    <style>
        /* Custom Styles */
        body {
            background: white;
            font-family: sans-serif;
            margin: 0;
            padding: 0;
        }

        .container {
            background: #fff;
            padding: 20px;
            width: 50%;
            margin: 50px auto;
            border-radius: 10px;
            box-shadow: 0 20px 35px rgba(0, 0, 0, 0.1);
        }

        .container input {
            padding: 10px;
            font-size: 18px;
            margin: 10px 0;
            width: 100%;
            border-radius: 5px;
            border: 1px solid #ddd;
        }

        .container button {
            background-color: #4CAF50;
            color: white;
            padding: 10px 20px;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            width: 100%;
            font-size: 18px;
        }

        .container button:hover {
            background-color: #45a049;
        }

        .alert {
            padding: 10px;
            margin: 20px 0;
            border-radius: 5px;
            background-color: #4CAF50;
            color: white;
        }

        .error {
            background-color: #f44336;
        }

        /* Modal Styles */
        .modal {
            display: block; /* Start with modal visible */
            position: fixed;
            z-index: 1;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.4);
            padding-top: 60px;
        }

        .modal-content {
            background-color: #fefefe;
            margin: 5% auto;
            padding: 20px;
            border: 1px solid #888;
            width: 70%;
            max-width: 600px;
            border-radius: 10px;
        }

        .close {
            color: #aaa;
            float: right;
            font-size: 28px;
            font-weight: bold;
        }

        .close:hover,
        .close:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }

        /* Hide visualization content initially */
        #visualization-content {
            display: none;
        }
    </style>
</head>
<body>
    <!-- Modal -->
    <div id="myModal" class="modal">
        <div class="modal-content">
            <span class="close" id="closeModal">&times;</span>
            <div id="modalContent">
                <!-- Form will be injected here by AJAX -->
            </div>
        </div>
    </div>

    <!-- Visualization content (hidden initially) -->
    <div id="visualization-content">
        <h1>Polynomial Term Visualization</h1>
        <p> <b>Current term:</b></p>
        <p id="vis"></p>
        <p id="term"></p>
        <p id="vis"></p>
        <p id="demo"></p>
        <p id="demo2"></p>
        <div style="text-align: center;">
        <p>or</p>
        </div>
        <p id="demo3"></p>
        <p><b>Factored form & choice of contribution:</b></p>
        <p>Click on the buttons to change the current summand within each factor. The current choice is displayed in red.</p>
    
    </div>
    
   
    <script>
        // Global variables to store polynomial data
        let polynomialsArray = [];
        let hasPolynomials = false;
        
        // Get the modal and close button
        var modal = document.getElementById("myModal");
        var span = document.getElementById("closeModal");
        
        // Function that numbers each term â€” equivalent to static int IDing in Java
        var incr = (function () {
            var i = 0;
            return function () {
                return i++;
            }
        })();

        // What the project displays
        class Term {
            // Empty constructor
            constructor() {
                this.allFactors = [];
                this.termFactors = [];
            }
           
            // Add a Factor to our internal representation
            push(factor) {
                this.allFactors.push(factor);
                this.termFactors.push(factor.at(0));
                console.log(this.termFactors);
            }
           
            // Factors send signal to update this, then it prints to screen
            update(index, value){
                // Update term at index to screen
                this.termFactors[index] = value;
                this.print();
                this.regexPrint();
            }
           
            // Start up term with leftmost summands
            initialize(){
                for (let i = 0; i < this.allFactors.length; i++) {
                    this.termFactors[i] = this.allFactors[i].at(0);
                }
                this.print();
                this.regexPrint();
            }
           
            // Send our current term to the screen at "vis" element
            print() {
                document.getElementById("vis").innerHTML = "$$".concat(this.termFactors.join(" \\cdot "), "$$");
                MathJax.typesetPromise();
            }

            regexPrint() {
                let coefficients = 1;
                let vars = new Map();
                
                // const test = "3a_22^4"
                const format = /(-?[\d\.]*)(\D)?(_-?\d|_\{-?[\d\.]*\})?(\^-?\d|\^\{-?[\d\.]*\})?/;
                
                for (let i = 0; i < this.termFactors.length; i++){
                    var result = this.termFactors[i].match(format);
                    //document.getElementById("demo3").innerHTML += result.join("| ") + " // ";
                    
                    let factorsSoFar = "";
        		 //document.getElementById("testprint").innerHTML = "test";
 			        let count = 0;
                    while(factorsSoFar.length < this.termFactors[i].length && count <= 10){
                    //document.getElementById("testprint").innerHTML += "" + result[0];

                    let coeff = parseFloat(result[1]);
                    if (!isNaN(coeff)){
                        coefficients *= coeff; 
                        //document.getElementById("demo3").innerHTML += "" + tmp + "***";
                    }
                    if (result[1] === "-"){
            	    coefficients *= -1;
                    }
            
                    //parse variable term (x_b)
                    let variable = result[2]
                    if (!(result[3] === undefined)){
                	variable += result[3];
         	        }
            	
                    // parse exponent (^c)
                    //document.getElementById("demo3").innerHTML += "" + variable + "***";
                    let exp = 1;
                    const int_format = /\^\{?(-?[\d\.]*)\}?/;
            
                    //check if has exponent term
                    if (!(result[4] === undefined)){
                    	//document.getElementById("demo3").innerHTML += "" + result[4] + "+++"
                    	 let int_exp_res = result[4].match(int_format);
                         //document.getElementById("demo3").innerHTML += "" + int_exp_res[1] + "===";
                         let temp = int_exp_res[1];
                      exp = parseFloat(temp);
                    }
            
                    //if variable in map, update, otherwise add
                    if (vars.has(variable)){
                    	let num = vars.get(variable);
                    	num += exp;
                        vars.set(variable,num);
                
                    }
                    else{
                    	vars.set(variable,exp);
                    }
                    //document.getElementById("demo3").innerHTML += "" + variable + "," +vars.get(variable) + "***";

                     //inc while
                    factorsSoFar += result[0];
             
                    if (factorsSoFar.length < this.termFactors[i].length){
                        let substrFactor = this.termFactors[i].substring(factorsSoFar.length);
                        result = substrFactor.match(format);
                    }
                    count ++;
                    } 
                }


    
        
    	        let str = "";
                //output the final expression
                if (coefficients == 1){ //account for 1,-1
                	str = "$$";

                } else if (coefficients == -1){
                	str = "$$" + "-";

                }else { 
                	str = "$$"+ coefficients;
                }

                for (let [k, v] of vars) {
                 if (k === undefined) {
                    ;//do nothing
                 } else if (!showExponentsOfOne && v == 1) {
                    str += "" + k;
                    } else {
                    str += "" + k + "^{" + v + "}";
                    }
                }
                
                document.getElementById("demo3").innerHTML = str + "$$";

            }
        }        


        // Member fields:
        //   summands = an array containing each element as a string ["x_1", "x_2"]
        //   currPointer = the current x_i being sent to the TermExtractor
        class Factor {
            constructor(summands) {
                this.summands = summands;
                this.currPointer = 0;
                this.factorNumber = incr();
                this.toButton();
            }
         
            // Returns this factor written out in MathJax, $$(x_1 + x_2)$$
            toString() {
                let outputString = this.summands.join(" + ");
                outputString = "$$(".concat(outputString, ")$$");
                return outputString;
            }
         
            // Highlights the current in-use summand
            toStringHighlighted() {
                let outputString = "";
                // Format correctly, but also highlighted
                for (let i = 0; i < this.summands.length; i++) {
                    if (i != 0 && this.summands[i][0] != '-') {
                        outputString += " + ";
                    }
                    if (i == this.currPointer) {
                        outputString += "{\\require{color} \\textcolor{red}{" + this.summands[i] + "}}";
                    } else {
                        outputString += this.summands[i];
                    }
                }
                outputString = "$$(".concat(outputString, ")$$");
                return outputString;
            }
         
            // Returns the ith summand in this factor
            at(i) {
                if (i > this.summands.length) {
                    return "index out of bounds"
                }
                return this.summands[i];
            }
         
            // Makes a button
            // Click once to change x_3 to x_4
            // Double click to change x_3 to x_2
            toButton() {
                const newButton = document.createElement('button');
                newButton.innerHTML = this.toStringHighlighted();
                newButton.style.height = '50px';
                // Add the button to the body
                document.body.appendChild(newButton);
           
                // Click once to change x_1 to x_2
                newButton.addEventListener('click', () => {
                    this.currPointer++;
                    this.currPointer %= this.summands.length;
                    document.getElementById("vis").innerHTML = this.at(this.currPointer % this.summands.length);
                    globalTerm.update(this.factorNumber, this.at(this.currPointer));
                    newButton.innerHTML = this.toStringHighlighted();
                    MathJax.typesetPromise();
                }); 

            }
        }

        // ALWAYS HAVE THIS AS FIRST THING WE DO
        let globalTerm = new Term();
        let showExponentsOfOne = true;

        // Function to toggle exponents of one
        function toggleExponents() {
        showExponentsOfOne = !showExponentsOfOne; // Toggle the boolean value
        console.log("Exponents of One are now " + (showExponentsOfOne ? "shown" : "hidden"));
    
        // Update the display if we have polynomials
        if (globalTerm.termFactors.length > 0) {
        globalTerm.regexPrint();
    }
}

// Function to create toggle button
function createToggleButton() {
    var button2 = document.createElement("button");
    button2.innerHTML = "Toggle Exponents of One"; 
    button2.style.height = '50px';
    button2.style.width = '200px';
    button2.style.marginTop = '20px'; 
    document.getElementById('button-container').appendChild(button2);
    // Note: Don't use () when adding event listener
    button2.addEventListener('click', toggleExponents);
}
    
        
        // Function to process polynomials and create visualization
        function processPolynomials(polynomials) {
            // Clear any existing factors
            document.body.querySelectorAll('button').forEach(button => {
                if (button.id !== 'closeModal') {
                    button.remove();
                }
            });
            
            // Reset the term
            globalTerm = new Term();
            
            // Reset the increment counter
            incr = (function () {
                var i = 0;
                return function () {
                    return i++;
                }
            })();
            
            // Create a factor for each polynomial
            for (let i = 0; i < polynomials.length; i++) {
                const factor = new Factor(polynomials[i]);
                globalTerm.push(factor);
            }
            
            // Initialize the term
            globalTerm.initialize();

            // Create the toggle button
            createToggleButton();
        }

        // Load form via AJAX on page load
        window.onload = function() {
            var xhr = new XMLHttpRequest();
            xhr.open('GET', 'inputpoly.php', true);
            xhr.onreadystatechange = function() {
                if (xhr.readyState === 4 && xhr.status === 200) {
                    // Inject the form into the modal content
                    document.getElementById("modalContent").innerHTML = xhr.responseText;
                    
                    // Add event listener for form submission
                    var form = document.getElementById("polynomialForm");
                    if (form) {
                        form.addEventListener("submit", submitForm);
                    }
                }
            };
            xhr.send();
        };
        
        // Function to handle form submission
        function submitForm(event) {
            event.preventDefault();
            
            // Get form data
            var formData = new FormData(event.target);
            
            var xhr = new XMLHttpRequest();
            xhr.open('POST', 'inputpoly.php', true);
            xhr.onreadystatechange = function() {
                if (xhr.readyState === 4 && xhr.status === 200) {
                    try {
                        // Parse the JSON response
                        var response = JSON.parse(xhr.responseText);
                        
                        // Update modal content
                        var resultHtml = '';
                        
                        // Add form back
                        resultHtml += '<h2>Factor Polynomials</h2>';
                        resultHtml += '<form id="polynomialForm" method="POST">';
                        resultHtml += '<label for="polynomials">Enter polynomials (e.g., (x^4 + 3)(x^2 + x^4 + x^7)(x^2)):</label>';//check gitbub
                        resultHtml += '<input type="text" id="polynomials" name="polynomials" required><br><br>';
                        resultHtml += '<button type="submit">Submit</button>';
                        resultHtml += '</form>';
                        
                        if (response.showAlert) {
                            resultHtml += "<div class='alert'>Polynomials added successfully!</div>";
                        }
                        
                        if (response.showError) {
                            resultHtml += "<div class='alert error'>" + response.showError + "</div>";
                        }
                        
                        if (response.polynomials && response.polynomials.length > 0) {
                            resultHtml += "<h3>Polynomials Entered:</h3>";
                            resultHtml += "<pre>" + JSON.stringify(response.polynomials, null, 2) + "</pre>";
                            
                            // Store the polynomials for later use
                            polynomialsArray = response.polynomials;
                            hasPolynomials = true;
                        }
                        
                        // Update the modal content
                        document.getElementById("modalContent").innerHTML = resultHtml;
                        
                        // Add event listener to the new form
                        var newForm = document.getElementById("polynomialForm");
                        if (newForm) {
                            newForm.addEventListener("submit", submitForm);
                        }
                    } catch (e) {
                        console.error("Error parsing response:", e);
                    }
                }
            };
            xhr.send(formData);
        }
        
        // When the user clicks on <span> (x), close the modal and display visualization if we have polynomials
        span.onclick = function() {
            if (hasPolynomials) {
                // Hide modal
                modal.style.display = "none";
                
                // Show visualization content
                document.getElementById("visualization-content").style.display = "block";
                
                // Process the polynomials
                processPolynomials(polynomialsArray);
                
                // Reset MathJax
                MathJax.typesetPromise();
            } else {
                alert("Please enter valid polynomials before proceeding.");
            }
        };

    
    </script>
</body>
</html>
